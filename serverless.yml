service: portfolio-website

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}
  environment:
    STATIC_DEPLOYMENT: true
    S3_BUCKET_NAME: ${self:custom.s3Bucket}
    IMAGE_FAVICON_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/FavIcon"
    IMAGE_LOGO_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/Logo"
    IMAGE_BANNER_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/Banner"
    IMAGE_ABOUT_PROFILE_URL: "/static/img/profile-photo.png"
    IMAGE_ABOUT_PHOTO1_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/about_photo1.jpg"
    IMAGE_ABOUT_PHOTO2_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/about_photo2.jpg"
    IMAGE_ABOUT_PHOTO3_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/about_photo3.jpg"
    IMAGE_ABOUT_PHOTO4_URL: "https://website-majorjayant.s3.eu-north-1.amazonaws.com/about_photo4.jpg"

custom:
  s3Bucket: ${self:service}-${self:provider.stage}-website
  s3BucketRegionalDomainName: ${self:custom.s3Bucket}.s3.${self:provider.region}.amazonaws.com
  pythonRequirements:
    dockerizePip: false
    useDownloadCache: true
    useStaticCache: true
    pythonBin: python
    slim: true
    strip: false
    fileName: requirements-dev.txt
    noDeploy:
      - pytest
      - boto3
      - botocore
      - docutils
      - jmespath
      - pip
      - setuptools
      - six
      - python-dateutil
  customDomain:
    domainName: ${opt:domain, ''}
    certificateArn: ${opt:cert, ''}
    createRoute53Record: true
  siteName: ${opt:domain, '${self:service}-${self:provider.stage}'}
  s3Sync:
    - bucketName: ${self:custom.s3Bucket}
      localDir: app/static
      deleteRemoved: true
      params:
        - "*.html":
            CacheControl: "public, max-age=0, must-revalidate"
        - "static/css/*":
            CacheControl: "public, max-age=31536000, immutable"
        - "static/js/*":
            CacheControl: "public, max-age=31536000, immutable"
        - "static/img/*":
            CacheControl: "public, max-age=31536000, immutable"
        - "static/data/*":
            CacheControl: "public, max-age=3600"

functions:
  get-content:
    handler: lambda/get_content.handler
    events:
      - http:
          path: /api/get-content
          method: get
          cors: true

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000

    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
              Action:
                - 's3:GetObject'
              Resource: !Sub 'arn:aws:s3:::${self:custom.s3Bucket}/*'

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "OAI for portfolio website"

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          PriceClass: PriceClass_100
          HttpVersion: http2
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
            - Id: APIOrigin
              DomainName: !Sub '${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com'
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              OriginPath: /${self:provider.stage}
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          CacheBehaviors:
            - PathPattern: /api/*
              TargetOriginId: APIOrigin
              ViewerProtocolPolicy: https-only
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              CachedMethods:
                - GET
                - HEAD
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                Cookies:
                  Forward: all
          # Simplified to avoid YAML errors
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

  Outputs:
    WebsiteBucketName:
      Value: !Ref WebsiteBucket
    CloudFrontDistributionId:
      Value: !Ref CloudFrontDistribution
    CloudFrontDomainName:
      Value: !GetAtt CloudFrontDistribution.DomainName

plugins:
  - serverless-python-requirements
  - serverless-s3-sync
  - serverless-domain-manager 